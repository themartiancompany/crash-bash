#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_globals() {
  local \
    _OLDPWD
  set \
    -e \
    -u
  shopt \
    -s \
      extglob
  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v \
        SOURCE_DATE_EPOCH \
      '%(%s)T' \
      -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  # shellcheck disable=SC2005
  _path="$( \
    _OLDPWD="$( \
      pwd)" && \
    export \
      _OLDPWD && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD
  # Set application name
  # from the script's file name
  app_name="${0##*/}"
}

_get_bin() {
  dirname \
    "$(command \
         -v \
         "env")"
}

_get_usr() {
  dirname \
    "$(_get_bin)"
}

# Show an INFO message
# $1: message string
_msg_info() {
  local \
    _msg=(
      "$@"
    ) \
    _fmt_line=() \
    _line
  [[ "${quiet}" == "y" ]] || \
    for _line \
      in "${_msg[@]}"; do
      _printf \
        '[%s] INFO: %s\n' \
        "${app_name}" \
        "${_line}"
    done
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg=()
  _msg=(
    "${1}"
  )
  _printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg=(
      "${1}"
    ) \
    _error=${2}
  _printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _target \
    _ass_target \
    _ass_type
  _target="${_obj}_${_var}"
  _ass_target="${_obj}[${_var}]"
  _ass_type="$( \
    _get_type \
      "${_obj}")"
  [[ "${_ass_type}" == "dict" ]] && \
    _target="${_ass_target}"
  printf \
    -v "${_target}" \
    "%s" \
    "${_value}"
}

# Returns type ('string', 'list', 'dict') given
# its name
# $1: an object
_get_type() {
  local \
    _obj="${1}" \
    _type="string" \
    _declare
  _declare="$( \
    declare \
      -p \
        "${_obj}" 2>&1)"
  [[ \
    "${_declare}" == \
    *"declare:"*"${_obj}"*": not found" ]] && \
    _type="undefined"
  [[ \
    "${_declare}" == \
    "declare -A "* ]] && \
    _type="dict"
  [[ \
    "${_declare}" == \
    "typeset -a"* ]] && \
    _type="array"
  echo \
    "${_type}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _ass_target \
    _ass_type \
    _msg \
    _ref \
    _type \
    _target
  _ass_target="${_obj}"
  _target="${_obj}_${_var}"
  _ref="${_target}[@]"
  _ass_ref="${_obj}[${_var}]"
  _type="$( \
    _get_type \
      "${_target}")"
  _ass_type="$( \
    _get_type \
      "${_ass_target}")"
  [[ "${_type}" == "undefined" ]] && \
  [[ "${_ass_type}" == "undefined" ]] && \
  [[ ! -v "${_ass_ref}" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_ass_type}" == "dict" ]] && \
    if [[ -v "${_ass_ref}" ]]; then
      _ref="${_ass_ref}"
    fi
  printf \
    "%s\n" \
    "${!_ref}"
}

_check_cmd(){
  local \
    _cmd="${1}" \
    _cmd_var \
    _flag="" \
    _pkgs=()
  shift \
    1
  _pkgs=(
    "$@"
  )
  _cmd_var="$( \
    printf \
      "%s" \
      "${_cmd}" | \
      sed \
        "s/-/_/g")"
  command \
     -v \
     "${_cmd}" &> /dev/null && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "$( \
        command \
          -v \
          "${_cmd}")" && \
    _flag=true
  [ -e "${_path}/${_cmd}" ] && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "${_path}/${_cmd}" && \
    _flag=true
  if [[ "${_flag}" != "true" ]]; then
    if [[ "${_pkgs[*]}" != "" ]]; then
      _cmd="${_pkgs[*]}"
    fi
    _msg_error \
      "Install ${_cmd}" \
      1
  fi
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${_obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable pointing to
# a path if an override variable is defined,
# otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$( \
	  _get \
	    "${_obj}" \
            "${_var}")")"
}


# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text="${1}" \
    _exit_code="${2}"
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit_code}"
}

# Colorized print
_printf() {
  local \
    _args=()
    _pygmentize_opts=()
  _pygmentize_opts=(
    -g
    -O style=emacs
  )
  _args=(
      "$@"
  )
  # shellcheck disable=SC2059
  _sho \
    "$( \
      printf \
        "${_args[@]}")" \
    "${_pygmentize_opts[@]}"
}

# Colorized Display function
_sho() {
  local \
    _text="${1}" \
    _pygmentize
  _pygmentize="$( \
    command \
      -v \
      "pygmentize"{,2} | \
      head \
        -n \
	1)"
  shift
  _pygmentize_opts=(
    "$@"
  )
  [[ "${color}" == "y" ]] && \
  [[ "${_pygmentize}" != "" ]] && \
    echo \
      "${_text}" | 
      "${_pygmentize}" \
        "${_pygmentize_opts[@]}" && \
    return
  printf \
    "%s\n" \
    "${_text}"
}

_config_user_init() {
  local \
    _app="${1}" \
    _cfg_dir \
    _share
  _share="$( \
    _get_usr)/share"
  _cfg_dir="${HOME}/.config/${_app}"
  if [ ! -d "${_cfg_dir}" ]; then
    _msg_info \
      "creating: ${_cfg_dir}"
    mkdir \
      -p \
      "${_cfg_dir}"
    chmod \
      700 \
      "${_cfg_dir}"
    [ \
      -d \
        "${_share}/$( \
          _get \
            "app" \
            "name")/configs" ] && \
      _msg_info \
        "copying system config files..."
      cp \
        -r \
        "${_share}/$( \
          _get
            "app" \
            "name")/configs/"* \
        "${_cfg_dir}/" || \
    true
  fi
}

_options_load() {
  local \
    _name="${1}"
  _set \
    "${_name}" \
    "options" \
    "${HOME}/.config/$( \
      _get \
        "app" \
        "name")/${_name}_options"
  [ \
    -e \
      "$( \
        _get \
	  "${_name}" \
          "options")" ] && \
    source \
      "$( \
        _get \
	  "${_name}" \
	  "options")" || \
    _msg_info \
      "no config for ${_name}"
}

_read_setting() {
  local \
    _cfg="${1}" \
    _key="${2}"
  _line="$( \
    cat \
      "${_cfg}" | \
      grep \
        "${_key}")"
  echo \
    "${_line}" | \
    awk \
      -F "=" \
      '{print $2}'
}

_write_setting() {
  local \
    _cfg="${1}" \
    _key="${2}" \
    _value="${3}"
  sed \
    -i \
    "/${_key}=/d" \
    "${_cfg}"
  echo \
    "${_key}=${_value}" >> \
    "${_cfg}"
}

_run() {
  local \
    _name="${1}" \
    _timeout="${2}" \
    _mode="${3}" \
    _cmd=() \
    _pid
  shift \
    3
  _cmd=(
    "$@"
  )
  _pid="$( \
    mktemp)"
  _msg_info \
    "running '${_name}'"
  [[ "${_timeout}" == ""  ]] || \
  [[ "${_timeout}" != 0  ]] && \
    _msg_info \
      "'${_name}' timeout: ${_timeout}s"
  _msg_info \
    "'${_name}' command: '${_cmd[*]}'"
  _msg_info \
    "'${_name}' pid file: ${_pid} "
  _set \
    "${_name}" \
    "pid" \
    "${_pid}"
  "${_cmd[@]}" & \
    echo \
      "$!" > \
      "${_pid}"
  _msg_info \
    "'${_name}' running with pid $( \
      cat \
        "${_pid}")"
  [[ "${_timeout}" == ""  ]] || \
  [[ "${_timeout}" != 0  ]] && \
    (sleep \
       "${_timeout}" && \
     kill \
       -INT \
       "$( \
         cat \
           "${_pid}")")
  if [[ "${_mode}" == "sync" ]]; then
    wait \
      "$( \
        cat \
          "${_pid}")"
  fi
}

_gettmp() {
  local \
    _tmp_obj
  _tmp_obj="$( \
    mktemp)"
  dirname \
    "${_tmp_obj}"
  rm \
    -r \
    "${_tmp_obj}"
}

_require_root() {
(( EUID != 0 )) && \
  _msg_error \
    "$(_get \
         "app" \
         "name") must be run as root." \
    1
}

# vim:set sw=2 sts=-1 et:
