#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'ffmpeg'
}

# shellcheck disable=SC2034
_global_variables() {
  out_stdout=""
  ah_ok=""
  un_tru=""
  out_file=""
  color=""
  quiet=""
}

# rrrrr
# $1: sette
# $@: te
_ahno() {
  local \
    _c="${1}" \
    _i=(
      "${2}"
    ) \
    _opts=()
  _msg_info \
    "$( \
      printf \
        "gone %s %s" \
	"${_c}" \
	"${_i[*]}")"
  if [[ "${_i[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  _opts+=(
    "${_iu_opts[@]}"
    "li"
  ) 
  _sho \
    "$( \
      printf \
        "running ohno from ${_c} with options: %s" \
      "${_opts[*]}")"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "un" \
    "tru" \
    "0"
  _set_override
    "ah" \
    "ok" \
    "$( \
      _get \
        "un" \
	"tru").0o0o0o0oo0o0o0o0o"
  _set_override
    "ah" \
    "app" \
    "e"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

adddis

Usage:
  $(_get "app" "name")
    [options]
    (<un_tru>)
  options:
     -a                   nononon 
     -s                   Output to stdout.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'ascvh?' \
    arg; do
  case \
    "${arg}" in
    a) ovveride_ah_app="n" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
(( $# == 1 )) && \
  un_tru="${1}"
shift \
  1
_set_overrides
_config_user_init \
  "ahno"
_options_load \
  "ai_u"
_ahno \
  "${un_tru}"
